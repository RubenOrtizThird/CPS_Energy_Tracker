"use strict";(self.webpackChunkjsapi_angular_cli=self.webpackChunkjsapi_angular_cli||[]).push([[9050],{39050:(W,y,e)=>{e.r(y),e.d(y,{default:()=>K});var E=e(15861),o=e(50484),p=e(11931),P=e(66476),M=(e(71950),e(3233)),d=e(79412),m=e(6785),_=e(80543),O=(e(1535),e(57678),e(14007),e(62185)),v=e(10141),D=e(26894),u=e(33721),C=e(95060),h=e(19855),c=e(80099),S=e(70509),R=e(25836),j=e(29717),n=e(8966),a=e(85601),L=e(66637),g=e(41391),f=e(35451),T=e(89481);const U=["atom","xml"],I={base:a.Z,key:"type",typeMap:{"simple-line":L.Z},errorContext:"symbol"},A={base:a.Z,key:"type",typeMap:{"picture-marker":g.Z,"simple-marker":f.Z},errorContext:"symbol"},B={base:a.Z,key:"type",typeMap:{"simple-fill":T.Z},errorContext:"symbol"};let s=class extends((0,h.h)((0,R.Q)((0,c.q)((0,S.I)((0,j.M)((0,M.R)(C.Z))))))){constructor(...t){super(...t),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(t,r){return"string"==typeof t?{url:t,...r}:t}readFeatureCollections(t,r){return r.featureCollection.layers.forEach(l=>{const i=l.layerDefinition.drawingInfo.renderer.symbol;i&&"esriSFS"===i.type&&i.outline?.style.includes("esriSFS")&&(i.outline.style="esriSLSSolid")}),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const t=this._get("title");return t&&"defaults"!==this.originOf("title")?t:this.url?(0,m.vt)(this.url,U)||"GeoRSS":t||""}set title(t){this._set("title",t)}load(t){const r=null!=t?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},t).catch(d.r9).then(()=>this._fetchService(r)).then(l=>{this.read(l,{origin:"service"})})),Promise.resolve(this)}hasDataChanged(){var t=this;return(0,E.Z)(function*(){const r=yield t._fetchService();return t.read(r,{origin:"service",ignoreDefaults:!0}),!0})()}_fetchService(t){var r=this;return(0,E.Z)(function*(){const l=r.spatialReference,{data:i}=yield(0,P.Z)(p.default.geoRSSServiceUrl,{query:{url:r.url,refresh:!!r.loaded||void 0,outSR:(0,u.oR)(l)?void 0:l.wkid??JSON.stringify(l)},signal:t});return i})()}_hasGeometry(t){return this.featureCollections?.some(r=>r.featureSet?.geometryType===t&&r.featureSet.features?.length>0)??!1}};(0,o._)([(0,_.Cb)()],s.prototype,"description",void 0),(0,o._)([(0,_.Cb)()],s.prototype,"featureCollections",void 0),(0,o._)([(0,O.r)("service","featureCollections",["featureCollection.layers"])],s.prototype,"readFeatureCollections",null),(0,o._)([(0,_.Cb)({type:D.Z,json:{name:"lookAtExtent"}})],s.prototype,"fullExtent",void 0),(0,o._)([(0,_.Cb)(n.id)],s.prototype,"id",void 0),(0,o._)([(0,_.Cb)(n.rn)],s.prototype,"legendEnabled",void 0),(0,o._)([(0,_.Cb)({types:I,json:{write:!0}})],s.prototype,"lineSymbol",void 0),(0,o._)([(0,_.Cb)({type:["show","hide"]})],s.prototype,"listMode",void 0),(0,o._)([(0,_.Cb)({types:A,json:{write:!0}})],s.prototype,"pointSymbol",void 0),(0,o._)([(0,_.Cb)({types:B,json:{write:!0}})],s.prototype,"polygonSymbol",void 0),(0,o._)([(0,_.Cb)({type:["GeoRSS"]})],s.prototype,"operationalLayerType",void 0),(0,o._)([(0,_.Cb)(n.HQ)],s.prototype,"url",void 0),(0,o._)([(0,_.Cb)({json:{origins:{service:{read:{source:"name",reader:t=>t||void 0}}}}})],s.prototype,"title",null),(0,o._)([(0,_.Cb)({readOnly:!0,json:{read:!1},value:"geo-rss"})],s.prototype,"type",void 0),s=(0,o._)([(0,v.j)("esri.layers.GeoRSSLayer")],s);const K=s}}]);