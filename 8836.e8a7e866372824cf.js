"use strict";(self.webpackChunkjsapi_angular_cli=self.webpackChunkjsapi_angular_cli||[]).push([[8836],{85085:(g,c,n)=>{n.r(c),n.d(c,{execute:()=>b});var d=n(15861),p=n(57964);function b(l,s){let e=s.responseType;e?"array-buffer"!==e&&"blob"!==e&&"json"!==e&&"native"!==e&&"native-request-init"!==e&&"text"!==e&&(e="text"):e="json",s.responseType=e;const f=s.signal;return delete s.signal,globalThis.invokeStaticMessage("request",{url:l,options:s},{signal:f}).then(function(){var h=(0,d.Z)(function*(t){let u,r,i,_,a;if(t.data)if(t.data instanceof ArrayBuffer){if(!("json"!==e&&"text"!==e&&"blob"!==e||(u=new Blob([t.data]),"json"!==e&&"text"!==e||(_=yield u.text(),"json"!==e)))){try{r=JSON.parse(_||null)}catch(o){const j={...o,url:l,requestOptions:s};throw new p.Z("request:server",o.message,j)}if(r.error){const o={...r.error,url:l,requestOptions:s};throw new p.Z("request:server",r.error.message,o)}}}else"native"===e&&(t.data.signal=f,i=yield fetch(t.data.url,t.data),t.httpStatus=i.status);switch(e){case"blob":a=u;break;case"json":a=r;break;case"native":a=i;break;case"text":a=_;break;default:a=t.data}return{data:a,httpStatus:t.httpStatus,requestOptions:s,ssl:t.ssl,url:l}});return function(t){return h.apply(this,arguments)}}())}}}]);